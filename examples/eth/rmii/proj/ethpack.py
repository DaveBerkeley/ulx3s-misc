#!/usr/bin/env python3

# simple ethernet packet generator
# generates TX sequence for ETH PHY hardware
# to send on the wire

import binascii, struct

preamble = bytearray([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0xd5]);
payload = bytearray([
0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x40,0x00,0x01,0x02,0x03,0x08,0x06,0x00,0x01,
0x08,0x00,0x06,0x04,0x00,0x02,0x00,0x40,0x00,0x01,0x02,0x03,0xc0,0xa8,0x12,0x80,
0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0xa8,0x12,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
])
crc = binascii.crc32(payload)
crctx = struct.pack("<I",crc)
# ETH PHY hardware should send this TX sequence (LSB first):
tx = preamble + payload + crctx;
print("// eth tx len = %d (LSB first), crc32 = 0x%08x" % (len(tx),crc),end="")
for i in range(len(tx)):
  if i % 16 == 0:
    print("")
    print("// 0x%04x:" % i)
  else:
    print(" ",end="")
  print("%02x" % tx[i],end="")
print("")

# output should be this:
# // ARP, Reply 192.168.18.128 is-at 00:40:00:01:02:03
# // 0x0000: preamble
# 00 00 00 00 00 00 00 00 55 55 55 55 55 55 55 d5
# // 0x0010: payload data
# ff ff ff ff ff ff 00 40 00 01 02 03 08 06 00 01
# // 0x0020:
# 08 00 06 04 00 02 00 40 00 01 02 03 c0 a8 12 80
# // 0x0030:
# ff ff ff ff ff ff c0 a8 12 80 00 00 00 00 00 00
# // 0x0040: last 2 bytes are CRC
# 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6d 2a
# // 0x0050: 2 bytes of CRC
# fe d9
